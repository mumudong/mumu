查看端口与进程对应关系   lsof -i:6001

Docker有两个主要的部件：
    Docker: 开源的容器虚拟化平台。
    Docker Hub: 用于分享、管理Docker容器的Docker SaaS平台。
Docker使用客户端-服务器(client-server)架构模式。Docker客户端会与Docker守护进程进行通信。
Docker守护 进程会处理复杂繁重的任务，例如建立、运行、发布你的Docker容器。
Docker客户端和守护进程可以运行在同一个系统上，当然你也可以使用 Docker客户端去
连接一个远程的Docker守护进程。Docker客户端和守护进程之间通过socket或者RESTful API进行通信。


要理解Docker的内部构建，必须知道以下三种部件：
  Docker镜像 (Docker images)。
  Docker仓库 (Docker registeries)。
  Docker容器(Docker containers)。

  Docker镜像是一个只读的模板
  Docker仓库用来保存镜像。可以理解为代码控制中的代码仓库。同样的，Docker仓库也有公有和私有的概念。公有的Docker仓库名字是Docker Hub。Docker Hub提供了庞大的镜像集合供使用。这些镜像可以是你自己创建的，或者你也可以在别人的镜像基础上创建。Docker仓库是Docker的 分发 部分。
  一个Docker容器包含了所有的某个应用运行所需要的环境。每一个Docker容器都是从Docker镜像创建 的。Docker容器可以运行、开始、停止、移动和删除。每一个Docker容器都是独立和安全的应用平台。Docker容器是Docker的 运行 部分。

Docker镜像从这些基础的镜像创建，通过一种简单、具有描述性的步骤，我们称之为 指令(instructions)。
每一个指令会在镜像中创建一个新的层，指令可以包含这些动作：
    运行一个命令。
    增加文件或者文件夹。
    创建一个环境变量。
    当运行容器的时候哪些程序会运行。
这些指令存储在Dockerfile文件中。当你需要建立镜像的时候，Docker可以从Dockerfile中读取这些指令并且运行，然后返回一个最终的镜像。




docker run
    -a=[]          　　　 : Attach to `STDIN`, `STDOUT` and/or `STDERR`
    -t=false        　　  : Allocate a pseudo-tty
    --sig-proxy=true　    : Proxify all received signal to the process (non-TTY mode only) false就不能用ctrl D C退出了
    -i=false        　　  : Keep STDIN open even if not attached
    -d                    : 后台运行
	--rm=false            : Automatically remove the container when it exits (incompatible with -d)
	-m=""                 : Memory limit (format: <number><optional unit>, where unit = b, k, m or g)
    -c=0                  : CPU shares (relative weight)  -c=0完全利用，=512则只能利用50%

构建镜像主要有两种方式：
   使用docker commit命令从运行中的容器提交为镜像；
   使用docker build命令从 Dockerfile 构建镜像。

运行完删除镜像
1、docker run --rm --name=busybox -it busybox sh
2、新建一个文件.....
3、创建busybox:hello镜像
   docker commit busybox busybox:hello
4、






Docker支持的网络模式有：
    none       ：关闭容器内的网络连接
    bridge     ：通过veth接口来连接容器，默认配置。
    host       ：允许容器使用host的网络堆栈信息。 注意：这种方式将允许容器访问host中类似D-BUS之类的系统服务，所以认为是不安全的。
    container  ：使用另外一个容器的网络堆栈信息。
比如当前有一个绑定了本地地址localhost的Redis容器。如果另外一个容器需要复用这个网络堆栈，则需要如下操作：
$ sudo docker run -d --name redis example/redis --bind 127.0.0.1
$ # use the redis container's network stack to access localhost
$ sudo docker run --rm -ti --net container:redis example/redis-cli -h 127.0.0.1

sudo service docker
docker login 10.167.211.250 -u admin -p Xinhe2017
 sudo service docker restart

/etc/hosts文件中会包含容器的hostname信息，我们也可以使用--add-host这个参数来动态添加/etc/hosts中的数据。
$ /docker run -ti --add-host db-static:86.75.30.9 ubuntu cat /etc/hosts

127.0.0.1       localhost
::1             localhost ip6-localhost ip6-loopback
86.75.30.9      db-static、

package docker:build 

docker pull 10.167.202.170/hx-crawler/common-microservicehx-baidurss:0.0.1-SNAPSHOT

docker run -itdP --net over 10.167.202.170/hx-crawler/common-microservicehx-baidurss:0.0.1-SNAPSHOT  

查看容器运行
docker ps
docker ps -as

docker logs dockerid

停止容器   docker stop dockerid
搜索镜像   docker search httpd

删除镜像   docker rmi    docker rm
docker logs -f container name 噼里啪啦 一大堆....太对，清理掉

进入docker   docker exec -it 4f6889c062ba /bin/sh
             docker attach 44fc0f0582d9

删除所有容器 docker rm $(docker ps -a -q)

导出容器
docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2
docker import  my_ubuntu_v3.tar runoob/ubuntu:v4
将指定镜像保存成 tar 归档文件。
docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3
 docker load --input fedora.tar

docker network create -d bridge test-net
docker run -itd --name test1 --network test-net ubuntu /bin/bash
docker run -itd --name test2 --network test-net ubuntu /bin/bash


查看容器的root用户密码    docker logs <容器名orID> 2>&1 | grep '^User: ' | tail -n1
查看容器日志              docker logs -f <容器名orID>
删除所有镜像              docker rmi $(docker images | grep none | awk '{print $3}' | sort -r)

运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例
docker run --name redmine -p 9003:80 -p 9023:22 -d -v /var/redmine/files:/redmine/files -v /var/redmine/mysql:/var/lib/mysql sameersbn/redmine

一个容器连接到另一个容器
docker run -i -t --name sonar -d -link mmysql:db   tpires/sonar-server
sonar
容器连接到mmysql容器，并将mmysql容器重命名为db。这样，sonar容器就可以使用db的相关的环境变量了。


当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。
机器a                      docker save busybox-1 > /home/save.tar
机器b                      docker load < /home/save.tar

查看docker资源     docker attach $ID


从container中拷贝文件出来
sudo docker cp 7bb0e258aefe:/etc/debian_version .
拷贝7bb0e258aefe中的/etc/debian_version到当前目录下。
注意：只要7bb0e258aefe没有被删除，文件命名空间就还在，可以放心的把exit状态的container的文件拷贝出来




搭建私有仓库
首先在136机器上下载registry镜像
$ sudo docker pull registry
下载完之后我们通过该镜像启动一个容器
$ sudo docker run -d -p 5000:5000 registry
默认情况下，会将仓库存放于容器内的/tmp/registry目录下，这样如果容器被删除，则存放于容器中的镜像也会丢失，所以我们一般情况下会指定本地一个目录挂载到容器内的/tmp/registry下，如下：
$ sudo docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry


sudo docker pull busybox
接下来修改一下该镜像的tag。
$ sudo docker tag busybox 192.168.112.136:5000/busybox



docker build   -t 10.167.211.250/crawler/common-microservicehx-baidurss:0.0.1-SNAPSHOT wenjianjia/


docker安装
1.内核
通过uname命令来检查内核版本信息。
1）使用root权限登录系统
2）更新系统包到最新
yum -y update
2，建yum配置
cat >/etc/yum.repos.d/docker.repo <<-EOF
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF





yum makecache
yum -y update
yum list all

docker卸载
1.列出安装的软件包
    yum list installed | grep docker
2.移除软件包
    yum -y remove docker-engine.x86_64
上面的命令不会删除镜像、容器，卷组和用户自配置文件。
3.删除所有镜像、容器和组
    rm -rf /var/lib/docker


==============================
docker基于namespace/cgroups/联合文件系统
docker核心组件
  docker:客户端
  dockerd:docker服务的后台常驻进程,接收用户请求,执行具体的处理

docker和dockerd交互方式
   unix套接字:unix://socket_path,dockerd生成socket文件路径/var/run/docker.sock,root或docker用户组可访问
   tcp:tcp/host:port,有安全隐患,可使用tsl认证
   文件描述符:fd://
   dockerd监听了unix,客户端才可以使用,二者通信方式必须一致,unix是默认通信方式,若想远程访问dockerd,dockerd启动时添加-H参数

docker-init:
   linux 1号进程是所有进程的父进程,主机上进程出问题了init可以帮我们回收问题进程
   容器内部,当我们的业务进程没有回收子进程的能力时,docker run --init可帮助管理子进程,回收僵尸进程等
docker-proxy:做端口映射,通过iptables实现nat转发, iptables -L -nv -t nat


docker监控:
   docker stats containerId:瞬时监控,本机,不可远程
   cAdvisor:有查询界面、http接口、
      http://localhost:8080/containers/
      http://localhost:8080/docker/
   监控原理：cgroups实现容器资源限制和容器资源使用率,cgroups工作目录在/sys/fs/cgroup

docker run --name=nginx --cpus=1 --memory=2g --name=nginx -d nginx

linux内核提供了8中namespace,unshare是util-linux工具包中的工具
  mount namespace:隔离不同进程的挂载
     unshare --mount --fork /bin/bash
     mkdir /tmp/tmpfs
     mount -t tmpfs -o size=20m tmpfs /tmp/tmpfs
     df查看挂载信息
     ls -l /proc/self/ns
     新进一个客户端,看不到挂载信息,说明隔离了
   pid namespace: unshare --pid --fork --mount-proc /bin/bash
   uts namespace:隔离主机名
       unshare --uts --fork /bin/bash
       hostname -b testdocker
       hostname
   ipc namespace:隔离进程间通信
       unshare --ipc --fork /bin/bash
       ipcs -q：查看系统间通信队列
       ipcmk -Q: 创建系统间队列
   user namespace:隔离用户和用户组,典型场景是在主机上以非root用户运行的进程可在单独的user namepace映射为root用户
         即在容器内有root权限,而主机上只有普通用户
       unshare --user -r /bin/bash
       (如果返回unshare failed:invalid augument,需要执行echo 65535 > /proc/sys/user/max_user_namespace)
   net namespace:隔离网络设备、ip地址和端口
      查看主机网络信息：ip a
      创建net namespace: unshare --net --fork /bin/bash
      查看：ip a

cgroup:
  查看已挂载cgroups: mount -t cgroup
  创建cgroups很简单,在相应子系统下创建目录即可
  mkdir /sys/fs/cgroup/cpu/mdocker
  ls /sys/fs/cgroup/cup/mydocker
  创建进程加入cgroup:
    cd /sys/fs/cgroup/cpu/mydocker
    echo $$ > tasks
    cat tasks
    修改CPU限制时间为0.5核 echo 50000 > cpu.cfs_quota_us
    执行耗费CPU任务,top -p查看CPU使用
  删除cgroups只需删除对应目录即可

docker volumn create myVolume
-v挂在目录在/var/lib/docker/volumn

联合文件系统：UFS(union file system),把多个目录的文件联合挂载到一个目录下,形成单一的文件系统
  aufs/overlayFs/devicemapper三种实现
  aufs尚未合入linux内核主线,多用于ubuntu和debian支持
  每一个镜像层和容器层都是 /var/lib/docker 下的一个子目录，联合挂载点在 aufs/mnt 目录下，mnt 目录是真正的容器工作目录。

  mount -t aufs -o dirs=./container1:./image2:./image1  none ./mnt
  dirs 参数第一个冒号默认为读写权限，后面的目录均为只读权限，与 Docker 容器使用 AUFS 的模式一致
  mnt 变成了 AUFS 的联合挂载目录，我们可以使用 mount 命令查看一下已经创建的 AUFS 文件系统
  mount -t aufs
  我们每创建一个 AUFS 文件系统，AUFS 都会为我们生成一个 ID，这个 ID 在 /sys/fs/aufs/

  在centos中使用devicemapper
  AUFS 是一种文件系统，而Devicemapper 是一种映射块设备的技术框架
  lvm和软件磁盘阵列（将多个较小的磁盘整合成为一个较大的磁盘设备用于扩大磁盘存储和提供数据可用性）都是基于devicemapper
   Devicemapper 在内核中通过很多模块化的映射驱动（target driver）插件实现了对真正 IO 请求的拦截、过滤和转发工作，比如 Raid、软件加密、瘦供给（Thin Provisioning）等。其中瘦供给模块是 Docker 使用 Devicemapper 技术框架中非常重要的模块，下面我们来详细了解下瘦供给（Thin Provisioning）。
   Docker 是如何使用瘦供给来做到像 AUFS 那样分层存储文件的吗？答案就是： Docker 使用了瘦供给的快照（snapshot）技术。
   当 Docker 使用 Devicemapper 作为文件存储驱动时，Docker 将镜像和容器的文件存储在瘦供给池（thinpool）中，并将这些内容挂载在 /var/lib/docker/devicemapper/ 目录下。
   Docker 的 Devicemapper 模式有两种：
   第一种是 loop-lvm 模式，该模式主要用来开发和测试使用；
      systemctl stop docker
      编辑 /etc/docker/daemon.json 文件，如果该文件不存在，则创建该文件，并添加以下配置
        {"storage-driver": "devicemapper"}
      systemctl start docker
      docker info


   第二种是 direct-lvm 模式，该模式推荐在生产环境中使用
        {
          "storage-driver": "devicemapper",
          "storage-opts": [
            "dm.directlvm_device=/dev/xdf",
            "dm.thinp_percent=95",
            "dm.thinp_metapercent=1",
            "dm.thinp_autoextend_threshold=80",
            "dm.thinp_autoextend_percent=20",
            "dm.directlvm_device_force=false"
          ]
        }

    通常情况下， overlay2 会比 AUFS 和 Devicemapper 性能更好，而且更加稳定，因为 overlay2 在 inode 优化上更加高效。因此在生产环境中推荐使用 overlay2 作为 Docker 的文件驱动。
    查看磁盘信息 lsblk
    mkfs 命令格式化磁盘 vdb1：mkfs.xfs -f -n ftype=1 /dev/vdb1
    将挂载信息写入到 /etc/fstab，保证机器重启挂载目录不丢失：echo "/dev/vdb1 /var/lib/docker xfs defaults,pquota 0 0" >> /etc/fstab
    使用 mount 命令使得挂载目录生效：mount -a
    查看挂载信息：lsblk
    使用 xfs_info 命令验证下 d_type 是否已经成功开启：xfs_info /var/lib/docker | grep ftype
    可以看到输出结果为 ftype=1，证明 d_type 已经被成功开启。

    在 Docker 中配置 overlay2
        systemctl stop docker
        备份 /var/lib/docker 目录：cp -au /var/lib/docker /var/lib/docker.back
        在 /etc/docker 目录下创建 daemon.json 文件，如果该文件已经存在，则修改配置为以下内容：
        {
          "storage-driver": "overlay2",
          "storage-opts": [
            "overlay2.size=20G",
            "overlay2.override_kernel_check=true"
          ]
        }
     限制每个容器的磁盘空间大小是通过 xfs 的 pquota 特性实现，overlay2.size 可以根据不同的生产环境来设置这个值的大小。我推荐你在生产环境中开启此参数，防止某个容器写入文件过大，导致整个 Docker 目录空间溢出。
     systemctl start docker
     docker info

     overlay2 的目录是镜像和容器分层的基础，而把这些层统一展现到同一的目录下的过程称为联合挂载（union mount）。overlay2 把目录的下一层叫作lowerdir，上一层叫作upperdir，联合挂载后的结果叫作merged
o    verlay2 文件系统最多支持 128 个层数叠加，也就是说你的 Dockerfile 最多只能写 128 行，不过这在日常使用中足够了。
删除文件或目录：当文件或目录被删除时，overlay2 并不会真正从镜像中删除它，因为镜像层是只读的，overlay2 会创建一个特殊的文件或目录，这种特殊的文件或目录会阻止容器的访问。

编排工具
 小集群 docker-compose
 稍大的集群 docker-swarm
     Swarm 的架构整体分为管理节点（Manager Nodes）和工作节点（Worker Nodes）
     分布式： Swarm 使用Raft（一种分布式一致性协议）协议来做集群间数据一致性保障，使用多个容器节点组成管理集群，从而避免单点故障
     节点：
        Swarm 集群中的每一台物理机或者虚拟机称为节点。节点按照工作职责分为管理节点和工作节点，管理节点由于需要使用 Raft 协议来协商节点状态
     服务：服务的声明通常包含容器的启动方式、启动的副本数、环境变量、存储、配置、网络等一系列配置
       全局服务：每个工作节点上都会运行一个任务，类似于 Kubernetes 中的 Daemonset。
       副本服务：按照指定的副本数在整个集群中调度运行。
     任务是集群中的最小调度单位，它包含一个真正运行中的 Docker 容器。
     docker service create --replicas 1 --name hello-world nginx
     docker service ls
     docker service rm hello-world
     Swarm 已经为我们成功启动了一个 MySQL 服务，并且启动了两个 WordPress 实例。WordPress 实例通过 8080 端口暴露在了主机上，我们通过访问集群中的任意节点的 IP 加 8080 端口即可访问到 WordPress 服务
     docker stack deploy -c docker-compose.yml wordpress

 大集群 k8s


