spring boot jta atomikos 两阶段事务

https://www.cnblogs.com/balfish/p/8658691.html

两阶段提交：预执行、提交,参与者会一直持有数据库资源,如果发生网络故障,协调者和部分参与者不能正常通信会有数据不一致情况
三阶段提交：1、询问个参与者是否正常 2、预执行 3、提交

TCC: 业务层面补偿机制 https://www.cnblogs.com/jajian/p/10014145.html
如果你要实现一个 TCC 分布式事务，首先你的业务的主流程以及各个接口提供的业务含义，不是说直接完成那个业务操作，而是完成一个 Try 的操作。
这个操作，一般都是锁定某个资源，设置一个预备类的状态，冻结部分数据，等等，大概都是这类操作。

如果你要玩儿 TCC 分布式事务，必须引入一款 TCC 分布式事务框架，比如国内开源的 ByteTCC、Himly、TCC-transaction。
然后你原本的一个接口，要改造为 3 个逻辑，Try-Confirm-Cancel：

先是服务调用链路依次执行 Try 逻辑。
如果都正常的话，TCC 分布式事务框架推进执行 Confirm 逻辑，完成整个事务。
如果某个服务的 Try 逻辑有问题，TCC 分布式事务框架感知到之后就会推进执行各个服务的 Cancel 逻辑，撤销之前执行的各种操作。