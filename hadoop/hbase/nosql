hbase和Kudu对比：
   hbase写速度更快，random access快，但scan速度稍慢，olap需要较强的scan性能。hbase在sql/mr类的批量检索场景中性能不够好。
        通常这种场景需要预处理或cube管理
        hdfs批量顺序读快
        kudu介于hdfs和hbase之间，它定位OLAP和少量的OLTP工作流，如果有大量的random accesses，官方建议还是使用HBase最为合适
   kudu写速度稍慢，因为要先查询有没有当前key，主键可以是一列或多列。scan速度快，因为直接定位数据，不像hbase要读取memstore和storefile然后合并
   kudu不依赖hdfs，重写了存储，使用raft协议保证副本可靠性，Kudu分basedata(input data),undo log(已处理数据),redo log(未处理数据)

    快速分析 impala+kudu


---->redis
    Redis 通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash/Map), 列表(list), 集合(sets) 和
有序集合(sorted sets)五种类型，操作非常方便。比如，如果你在做好友系统，查看自己的好友关系，如果采用其他的key-value系统，
则必须把对应的好友拼接成字符串，然后在提取好友时，再把value进行解析，而redis则相对简单，直接支持list的存储(采用双向链表
或者压缩链表的存储方式)。
    通过定时快照（snapshot）和基于语句的追加（AppendOnlyFile，aof）两种方式，redis可以支持数据持久化——将内存中的数据
存储到磁盘上，方便在宕机等突发情况下快速恢复。

优势
    1. 非常丰富的数据结构；
    2. Redis提供了事务的功能，可以保证一串 命令的原子性，中间不会被任何操作打断；
    3. 数据存在内存中，读写非常的高速，可以达到10w/s的频率。
缺点
    1. Redis3.0后才出来官方的集群方案，但仍存在一些架构上的问题（出处）；
    2. 持久化功能体验不佳——通过快照方法实现的话，需要每隔一段时间将整个数据库的数据写到磁盘上，代价非常高；而aof方法只追踪变化的数据，类似于mysql的binlog方法，但追加log可能过大，同时所有操作均要重新执行一遍，恢复速度慢；
    3. 由于是内存数据库，所以，单台机器，存储的数据量，跟机器本身的内存大小。虽然redis本身有key过期策略，但是还是需要提前预估和节约内存。如果内存增长过快，需要定期删除数据
适用场景
    适用于数据变化快且数据库大小可遇见（适合内存容量）的应用程序。更具体的可参照这篇《Redis 的 5 个常见使用场景》译文

---->Mongodb
    在 MongoDB 中，文档是对数据的抽象，它的表现形式就是我们常说的 BSON（Binary JSON ）。
    BSON 是一个轻量级的二进制数据格式。MongoDB 能够使用 BSON，并将 BSON 作为数据的存储存放在磁盘中。
    MongoDB 目前支持的存储引擎为内存映射引擎。当 MongoDB 启动的时候，会将所有的数据文件映射到内存中，然后操作系统会托管
所有的磁盘操作。这种存储引擎有以下几种特点：
    * MongoDB 中关于内存管理的代码非常精简，毕竟相关的工作已经有操作系统进行托管。
    * MongoDB 服务器使用的虚拟内存将非常巨大，并将超过整个数据文件的大小。不用担心，操作系统会去处理这一切。
    在《Mongodb亿级数据量的性能测试》一文中，MongoDB 展现了强劲的大数据处理性能（数据甚至比Redis的漂亮的多）。
    另外，MongoDB 提供了全索引支持：包括文档内嵌对象及数组。Mongo的查询优化器会分析查询表达式，并生成一个高效的查询计划。
通常能够极大的提高查询的效率。

    MongoDB 在1.8版本之后开始支持 journal，就是我们常说的 redo log，用于故障恢复和持久化。
    当系统启动时，MongoDB 会将数据文件映射到一块内存区域，称之为Shared view，在不开启 journal 的系统中，数据直接写入
shared view，然后返回，系统每60s刷新这块内存到磁盘，这样，如果断电或down机，就会丢失很多内存中未持久化的数据。
    当系统开启了 journal 功能，系统会再映射一块内存区域供 journal 使用，称之为 private view，MongoDB 默认每100ms刷新
privateView 到 journal，也就是说，断电或宕机，有可能丢失这100ms数据，一般都是可以忍受的，如果不能忍受，那就用程序写log吧
（但开启journal后使用的虚拟内存是之前的两倍）

优势
    1. 强大的自动化 shading 功能（更多戳这里）；
    2. 全索引支持，查询非常高效；
    3. 面向文档（BSON）存储，数据模式简单而强大。
    4. 支持动态查询，查询指令也使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。
    5. 支持 javascript 表达式查询，可在服务器端执行任意的 javascript函数。

缺点
    1. 单个文档大小限制为16M，32位系统上，不支持大于2.5G的数据；
    2. 对内存要求比较大，至少要保证热数据（索引，数据及系统其它开销）都能装进内存；
    3. 非事务机制，无法保证事件的原子性。

适用场景
    1. 适用于实时的插入、更新与查询的需求，并具备应用程序实时数据存储所需的复制及高度伸缩性；
    2. 非常适合文档化格式的存储及查询；
    3. 高伸缩性的场景：MongoDB 非常适合由数十或者数百台服务器组成的数据库。
    4. 对性能的关注超过对功能的要求。
